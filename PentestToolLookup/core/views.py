from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader
from .models import *
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView
from django.db.models import Q
import re

# Create your views here.
def home(request):
    tools = Tool.objects.all()
    use_cases = UseCase.objects.all()
    template = loader.get_template('core/home.html')
    context = {
        'tools': tools,
        'use_cases': use_cases,
    }
    return HttpResponse(template.render(context, request))

def about(request):
    template = loader.get_template('core/about.html')
    context = {}
    return HttpResponse(template.render(context, request))

def search(request):
    if request.method == 'GET':
        query = request.GET.get('q')
        tool_results = Tool.objects.filter(
            Q(name__icontains=query) | Q(tags__name__in=[query]) | Q(use_cases__name__in=[query]) | Q(use_cases__name__icontains=query) |
            Q(use_cases__name__icontains=[query])
        ).distinct()
        example_results = Example.objects.filter(
            Q(name__icontains=query) | Q(tags__name__in=[query]) | Q(use_case__in=[query]) | Q(tool_name__in=[query]) | 
            Q(use_case__name__icontains=query) | Q(tool_name__name__icontains=query)
        ).distinct()
        template = loader.get_template('core/search_results.html')
        context = {
            'query': query,
            'tools': tool_results,
            'examples': example_results,
        }
        return HttpResponse(template.render(context, request))

class ExampleDetailView(DetailView):
    model = Example
    context_object_name = 'example'

    def get_context_data(self, **kwargs):
        # Get context for the number of args in a command and parse into modified command
        args = []
        qs = Example.objects.filter(ex_slug=self.object.ex_slug)
        cmd = qs.values_list('command', flat=True)
        cmd_str = cmd[0]    # Returns QuerySet, must specifiy the first one (only one available anyways)
        modified_cmd = ""
        i = 1
        loop_counter = 0
        for word in cmd_str.split():
            if re.search("<.+>", word):
                if re.match("<.+>$", word):
                    args.append(word)
                    modified_cmd += (" [[ arg" + str(i) + " ]]")
                    i += 1
                else:
                    # handles instances where the <.+> is not in the beggining of a word
                    first_time = True
                    split_word = re.split("(<.+?>)", word)
                    for split in split_word:
                        if re.match("<.+>", split):
                            args.append(split)
                            modified_cmd += ("[[ arg" + str(i) + " ]]")
                            i += 1
                            first_time = False
                        else:
                            if first_time == True:
                                modified_cmd += " "
                                first_time = False
                            modified_cmd += split
            else :
                if loop_counter > 0:
                    modified_cmd += " "
                modified_cmd += word

            loop_counter += 1

        # Get matching tool information
        #tool_qs = Tool.objects.filter(example=self.get_object())
        #tool = tool_qs[0]
        
        context = super().get_context_data(**kwargs)
        context['args'] = args
        context['modified_cmd'] = modified_cmd
        context['tags'] = qs.values_list('tags', flat=True)
        return context

    def get_object(self, queryset=None):
        return Example.objects.get(ex_slug=self.kwargs.get("ex_slug"))

class ToolDetailView(DetailView):
    model = Tool
    context_object_name = 'tool'

    def get_context_data(self, **kwargs):
        qs = Tool.objects.filter(name=self.get_object())
        context = super().get_context_data(**kwargs)
        context['examples'] = Example.objects.filter(tool_name=self.get_object())
        context['tags'] = qs.values_list('tags', flat=True)
        context['use_cases'] = qs.values_list('use_cases', flat=True)
        return context

    def get_object(self, queryset=None):
        return Tool.objects.get(tslug=self.kwargs.get("tslug"))
    
class ToolListView(ListView):
    model = Tool

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['tools'] = Tool.objects.order_by('name')
        context['examples'] = Example.objects.all()
        return context
    
class UseCaseListView(ListView):
    model = UseCase

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['use_cases'] = UseCase.objects.order_by('name')
        context['tools'] = Tool.objects.all()
        context['examples'] = Example.objects.all()
        return context
    
class UseCaseDetailView(DetailView):
    model = UseCase
    context_object_name = 'use_case'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['tools'] = Tool.objects.filter(use_cases=self.get_object())
        context['examples'] = Example.objects.all()
        return context